load("@bazel-erlang//:bazel_erlang_lib.bzl", "erlang_lib", "erlc", "test_erlang_lib")
load("@bazel-erlang//:ct.bzl", "ct_suite")
load(
    "//:rabbitmq.bzl",
    "APP_VERSION",
    "RABBITMQ_ERLC_OPTS",
    "RABBITMQ_TEST_ERLC_OPTS",
    "rabbitmq_integration_suite",
)

exports_files([
    "scripts/rabbitmq-defaults",
    "scripts/rabbitmq-env",
    "scripts/rabbitmq-plugins",
    "scripts/rabbitmq-server",
    "scripts/rabbitmqctl",
])

_APP_ENV = """[
	    {tcp_listeners, [5672]},
	    {num_tcp_acceptors, 10},
	    {ssl_listeners, []},
	    {num_ssl_acceptors, 10},
	    {ssl_options, []},
	    {vm_memory_high_watermark, 0.4},
	    {vm_memory_high_watermark_paging_ratio, 0.5},
	    {vm_memory_calculation_strategy, rss},
	    {memory_monitor_interval, 2500},
	    {disk_free_limit, 50000000}, %% 50MB
	    {msg_store_index_module, rabbit_msg_store_ets_index},
	    {backing_queue_module, rabbit_variable_queue},
	    %% 0 ("no limit") would make a better default, but that
	    %% breaks the QPid Java client
	    {frame_max, 131072},
	    %% see rabbitmq-server#1593
	    {channel_max, 2047},
	    {connection_max, infinity},
	    {heartbeat, 60},
	    {msg_store_file_size_limit, 16777216},
	    {msg_store_shutdown_timeout, 600000},
	    {fhc_write_buffering, true},
	    {fhc_read_buffering, false},
	    {queue_index_max_journal_entries, 32768},
	    {queue_index_embed_msgs_below, 4096},
	    {default_user, <<"guest">>},
	    {default_pass, <<"guest">>},
	    {default_user_tags, [administrator]},
	    {default_vhost, <<"/">>},
	    {default_permissions, [<<".*">>, <<".*">>, <<".*">>]},
	    {loopback_users, [<<"guest">>]},
	    {password_hashing_module, rabbit_password_hashing_sha256},
	    {server_properties, []},
	    {collect_statistics, none},
	    {collect_statistics_interval, 5000},
	    {mnesia_table_loading_retry_timeout, 30000},
	    {mnesia_table_loading_retry_limit, 10},
	    {auth_mechanisms, ['PLAIN', 'AMQPLAIN']},
	    {auth_backends, [rabbit_auth_backend_internal]},
	    {delegate_count, 16},
	    {trace_vhosts, []},
	    {ssl_cert_login_from, distinguished_name},
	    {ssl_handshake_timeout, 5000},
	    {ssl_allow_poodle_attack, false},
	    {handshake_timeout, 10000},
	    {reverse_dns_lookups, false},
	    {cluster_partition_handling, ignore},
	    {cluster_keepalive_interval, 10000},
	    {autoheal_state_transition_timeout, 60000},
	    {tcp_listen_options, [{backlog,       128},
	                          {nodelay,       true},
	                          {linger,        {true, 0}},
	                          {exit_on_close, false}
	                         ]},
	    {halt_on_upgrade_failure, true},
	    {ssl_apps, [asn1, crypto, public_key, ssl]},
	    %% see rabbitmq-server#114
	    {mirroring_flow_control, true},
	    {mirroring_sync_batch_size, 4096},
	    %% see rabbitmq-server#227 and related tickets.
	    %% msg_store_credit_disc_bound only takes effect when
	    %% messages are persisted to the message store. If messages
	    %% are embedded on the queue index, then modifying this
	    %% setting has no effect because credit_flow is not used when
	    %% writing to the queue index. See the setting
	    %% queue_index_embed_msgs_below above.
	    {msg_store_credit_disc_bound, {4000, 800}},
	    {msg_store_io_batch_size, 4096},
	    %% see rabbitmq-server#143,
	    %% rabbitmq-server#949, rabbitmq-server#1098
	    {credit_flow_default_credit, {400, 200}},
	    {quorum_commands_soft_limit, 32},
	    {quorum_cluster_size, 3},
	    %% see rabbitmq-server#248
	    %% and rabbitmq-server#667
	    {channel_operation_timeout, 15000},

	    %% see rabbitmq-server#486
	    {autocluster,
              [{peer_discovery_backend, rabbit_peer_discovery_classic_config}]
            },
	    %% used by rabbit_peer_discovery_classic_config
	    {cluster_nodes, {[], disc}},

	    {config_entry_decoder, [{passphrase, undefined}]},

	    %% rabbitmq-server#973
	    {queue_explicit_gc_run_operation_threshold, 1000},
	    {lazy_queue_explicit_gc_run_operation_threshold, 1000},
	    {background_gc_enabled, false},
	    {background_gc_target_interval, 60000},
	    %% rabbitmq-server#589
	    {proxy_protocol, false},
	    {disk_monitor_failure_retries, 10},
	    {disk_monitor_failure_retry_interval, 120000},
	    %% either "stop_node" or "continue".
	    %% by default we choose to not terminate the entire node if one
	    %% vhost had to shut down, see server#1158 and server#1280
	    {vhost_restart_strategy, continue},
	    %% {global, prefetch count}
	    {default_consumer_prefetch, {false, 0}},
		%% interval at which the channel can perform periodic actions
	    {channel_tick_interval, 60000},
	    %% Default max message size is 128 MB
	    {max_message_size, 134217728},
	    %% Socket writer will run GC every 1 GB of outgoing data
	    {writer_gc_threshold, 1000000000},
	    %% interval at which connection/channel tracking executes post operations
	    {tracking_execution_timeout, 15000},
        {track_auth_attempt_source, false}
	  ]
"""

BUILD_DEPS = [
    "//deps/rabbitmq_cli:rabbitmqctl",
    "@syslog//:bazel_erlang_lib",
]

DEPS = [
    "//deps/rabbit_common:bazel_erlang_lib",
    "@lager//:bazel_erlang_lib",
    "@ra//:bazel_erlang_lib",
    "@ranch//:bazel_erlang_lib",
    "@stdout_formatter//:bazel_erlang_lib",
]

RUNTIME_DEPS = [
    "//deps/rabbit/apps/rabbitmq_prelaunch:bazel_erlang_lib",
    "@cuttlefish//:bazel_erlang_lib",
    "@observer_cli//:bazel_erlang_lib",
    "@recon//:bazel_erlang_lib",
    "@sysmon_handler//:bazel_erlang_lib",
]

APP_REGISTERED = [
    "rabbit_amqqueue_sup",
    "rabbit_direct_client_sup",
    "rabbit_log",
    "rabbit_node_monitor",
    "rabbit_router",
]

EXTRA_APPS = [
    "sasl",
    "os_mon",
    "inets",
    "compiler",
    "public_key",
    "crypto",
    "ssl",
    "syntax_tools",
    "xmerl",
]

FIRST_SRCS = [
    "src/rabbit_tracking.erl",
    "src/rabbit_queue_type.erl",
    "src/rabbit_credential_validator.erl",
    "src/rabbit_policy_merge_strategy.erl",
    "src/rabbit_queue_master_locator.erl",
]

ERLC_OPTS = RABBITMQ_ERLC_OPTS + [
    "-DINSTR_MOD=gm",
]

erlang_lib(
    app_description = "RabbitMQ",
    app_env = _APP_ENV,
    app_module = "rabbit",
    app_name = "rabbit",
    app_registered = APP_REGISTERED,
    app_version = APP_VERSION,
    build_deps = BUILD_DEPS,
    erlc_opts = ERLC_OPTS,
    extra_apps = EXTRA_APPS,
    first_srcs = FIRST_SRCS,
    runtime_deps = RUNTIME_DEPS,
    deps = DEPS,
)

test_erlang_lib(
    app_description = "RabbitMQ",
    app_env = _APP_ENV,
    app_module = "rabbit",
    app_name = "rabbit",
    app_registered = APP_REGISTERED,
    app_version = APP_VERSION,
    build_deps = [
        "//deps/rabbitmq_cli:rabbitmqctl",
        "@syslog//:bazel_erlang_lib",
    ],
    erlc_opts = ERLC_OPTS + RABBITMQ_TEST_ERLC_OPTS,
    extra_apps = EXTRA_APPS,
    first_srcs = FIRST_SRCS,
    runtime_deps = [
        "//deps/rabbit/apps/rabbitmq_prelaunch:test_bazel_erlang_lib",  # <- test version
        "@cuttlefish//:bazel_erlang_lib",
        "@observer_cli//:bazel_erlang_lib",
        "@recon//:bazel_erlang_lib",
        "@sysmon_handler//:bazel_erlang_lib",
    ],
    deps = [
        "//deps/rabbit_common:test_bazel_erlang_lib",
        "@lager//:bazel_erlang_lib",
        "@ra//:test_bazel_erlang_lib",  # <- test version
        "@ranch//:bazel_erlang_lib",
        "@stdout_formatter//:bazel_erlang_lib",
    ],
)

erlc(
    name = "quorum_queue_utils",
    srcs = [
        "test/quorum_queue_utils.erl",
    ],
    dest = "test",
)

erlc(
    name = "rabbit_ha_test_consumer",
    srcs = [
        "test/rabbit_ha_test_consumer.erl",
    ],
    dest = "test",
    deps = [
        "//deps/amqp_client:bazel_erlang_lib",
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

erlc(
    name = "rabbit_ha_test_producer",
    srcs = [
        "test/rabbit_ha_test_producer.erl",
    ],
    dest = "test",
    deps = [
        "//deps/amqp_client:bazel_erlang_lib",
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

ct_suite(
    size = "small",
    suite_name = "amqqueue_backward_compatibility_SUITE",
    test_env = {
        "RABBITMQ_CT_SKIP_AS_ERROR": "true",
    },
    deps = DEPS,
)

ct_suite(
    size = "large",
    data = [
        "@rabbitmq_ct_helpers//tools/tls-certs:Makefile",
        "@rabbitmq_ct_helpers//tools/tls-certs:openssl.cnf.in",
    ],
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "backing_queue_SUITE",
    test_env = {
        "RABBITMQ_CT_SKIP_AS_ERROR": "true",
        "RABBITMQ_RUN": "$TEST_SRCDIR/$TEST_WORKSPACE/rabbitmq-for-tests-run",
        "RABBITMQCTL": "$TEST_SRCDIR/$TEST_WORKSPACE/broker-for-tests-home/sbin/rabbitmqctl",
        "RABBITMQ_PLUGINS": "$TEST_SRCDIR/$TEST_WORKSPACE/broker-for-tests-home/sbin/rabbitmq-plugins",
    },
    tools = [
        "//:rabbitmq-for-tests-run",
    ],
    runtime_deps = [
        "//deps/rabbitmq_cli:elixir_as_bazel_erlang_lib",
        "//deps/rabbitmq_cli:rabbitmqctl",
        "@rabbitmq_ct_client_helpers//:bazel_erlang_lib",
        "@rabbitmq_ct_helpers//:bazel_erlang_lib",
    ],
    deps = DEPS + [
        "//deps/amqp_client:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "medium",
    additional_srcs = [
        "test/dummy_interceptor.erl",
        "test/failing_dummy_interceptor.erl",
    ],
    suite_name = "channel_interceptor_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    additional_srcs = [
        "test/channel_operation_timeout_test_queue.erl",
    ],
    suite_name = "channel_operation_timeout_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    groups = [
        "cluster_size_2",
        "cluster_size_3",
    ],
    suite_name = "cluster_rename_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "cluster_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "large",
    suite_name = "clustering_management_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    data = [
        "test/definition_import_SUITE_data/case1.json",
    ],
    suite_name = "config_schema_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "confirms_rejects_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    additional_beam = [
        ":quorum_queue_utils",
    ],
    suite_name = "consumer_timeout_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "crashing_queues_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    additional_beam = [
        ":quorum_queue_utils",
    ],
    suite_name = "dead_lettering_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "definition_import_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "disconnect_detected_during_alarm_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "large",
    groups = [
        "cluster_size_5",
        "cluster_size_2",
        "cluster_size_3",
    ],
    suite_name = "dynamic_ha_SUITE",
    deps = DEPS + [
        "@proper//:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "medium",
    additional_beam = [
        ":quorum_queue_utils",
    ],
    suite_name = "dynamic_qq_SUITE",
    deps = DEPS + [
        "@proper//:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "large",
    additional_beam = [
        ":sync_detection_SUITE_beam_files",
    ],
    suite_name = "eager_sync_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "large",
    groups = [
        "registry",
        "enabling_on_single_node",
        "enabling_in_cluster",
        "clustering",
        "activating_plugin",
    ],
    suite_name = "feature_flags_SUITE",
    # The enabling_* tests chmod files and then expect writes to be blocked.
    # This probably doesn't work because we are root in the remote docker image.
    tags = ["exclusive"],
    runtime_deps = [
        "//deps/rabbit/apps/rabbitmq_prelaunch:test_bazel_erlang_lib",
        "//deps/rabbit/test/feature_flags_SUITE_data/my_plugin:bazel_erlang_lib",
    ],
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "lazy_queue_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "list_consumers_sanity_check_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "list_queues_online_and_offline_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    additional_beam = [
        ":quorum_queue_utils",
    ],
    suite_name = "maintenance_mode_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    additional_beam = [
        ":rabbit_ha_test_consumer",
        ":rabbit_ha_test_producer",
    ],
    suite_name = "many_node_ha_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "message_size_limit_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "metrics_SUITE",
    deps = DEPS + [
        "@proper//:bazel_erlang_lib",
    ],
)

ct_suite(
    size = "small",
    additional_srcs = [
        "test/mirrored_supervisor_SUITE_gs.erl",
    ],
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "mirrored_supervisor_SUITE",
    test_env = {
        "RABBITMQ_CT_SKIP_AS_ERROR": "true",
    },
    deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "msg_store_SUITE",
    test_env = {
        "RABBITMQ_CT_SKIP_AS_ERROR": "true",
    },
    deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "peer_discovery_classic_config_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "peer_discovery_dns_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "large",
    suite_name = "per_user_connection_channel_limit_partitions_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "per_user_connection_channel_limit_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "per_user_connection_channel_tracking_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "per_user_connection_tracking_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "per_vhost_connection_limit_partitions_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "per_vhost_connection_limit_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "per_vhost_msg_store_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "per_vhost_queue_limit_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "policy_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "priority_queue_recovery_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "priority_queue_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "product_info_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "proxy_protocol_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    additional_beam = [
        ":quorum_queue_utils",
    ],
    suite_name = "publisher_confirms_parallel_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "queue_length_limits_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "queue_master_location_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "large",
    additional_beam = [
        ":quorum_queue_utils",
    ],
    groups = [
        "classic_queue",
        "mirrored_queue",
        "quorum_queue",
        "quorum_queue_in_memory_limit",
        "quorum_queue_in_memory_bytes",
    ],
    suite_name = "queue_parallel_SUITE",
    runtime_deps = [
        "//deps/rabbit/apps/rabbitmq_prelaunch:test_bazel_erlang_lib",
    ],
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "large",
    additional_beam = [
        ":quorum_queue_utils",
    ],
    groups = [
        "single_node",
        "unclustered",
        "clustered",
    ],
    suite_name = "quorum_queue_SUITE",
    runtime_deps = [
        "//deps/rabbit/apps/rabbitmq_prelaunch:test_bazel_erlang_lib",
    ],
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "rabbit_core_metrics_gc_SUITE",
    deps = DEPS,
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "rabbit_fifo_int_SUITE",
    test_env = {
        "RABBITMQ_CT_SKIP_AS_ERROR": "true",
    },
    runtime_deps = [
        "@aten//:bazel_erlang_lib",
        "@gen_batch_server//:bazel_erlang_lib",
        "@meck//:bazel_erlang_lib",
        "@ra//:test_bazel_erlang_lib",
    ],
    deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

erlc(
    name = "test_util",
    srcs = [
        "test/test_util.erl",
    ],
)

ct_suite(
    size = "medium",
    additional_beam = [
        ":test_util",
    ],
    additional_hdrs = [
        "src/rabbit_fifo.hrl",
    ],
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS + [
        "-I deps/rabbit",  # allow rabbit_fifo.hrl to be included at src/rabbit_fifo.hrl
    ],
    suite_name = "rabbit_fifo_prop_SUITE",
    test_env = {
        "RABBITMQ_CT_SKIP_AS_ERROR": "true",
    },
    runtime_deps = [
        "@ra//:bazel_erlang_lib",
    ],
    deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
        "@proper//:bazel_erlang_lib",
    ],
)

ct_suite(
    size = "medium",
    additional_beam = [
        ":test_util",
        ":rabbit_fifo_v0_SUITE_beam_files",
    ],
    additional_hdrs = [
        "src/rabbit_fifo.hrl",
    ],
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS + [
        "-I deps/rabbit",  # allow rabbit_fifo.hrl to be included at src/rabbit_fifo.hrl
    ],
    suite_name = "rabbit_fifo_SUITE",
    test_env = {
        "RABBITMQ_CT_SKIP_AS_ERROR": "true",
    },
    runtime_deps = [
        "@meck//:bazel_erlang_lib",
        "@ra//:bazel_erlang_lib",
    ],
    deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

ct_suite(
    size = "medium",
    additional_beam = [
        ":test_util",
    ],
    additional_hdrs = [
        "src/rabbit_fifo_v0.hrl",
    ],
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS + [
        "-I deps/rabbit",  # allow rabbit_fifo.hrl to be included at src/rabbit_fifo.hrl
    ],
    suite_name = "rabbit_fifo_v0_SUITE",
    test_env = {
        "RABBITMQ_CT_SKIP_AS_ERROR": "true",
    },
    runtime_deps = [
        "@meck//:bazel_erlang_lib",
        "@ra//:bazel_erlang_lib",
    ],
    deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "rabbitmq_queues_cli_integration_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "rabbitmqctl_integration_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "rabbitmqctl_shutdown_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "signal_handling_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "large",
    additional_beam = [
        ":rabbit_ha_test_consumer",
        ":rabbit_ha_test_producer",
    ],
    groups = [
        "cluster_size_2",
        "cluster_size_3",
    ],
    suite_name = "simple_ha_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    additional_beam = [
        ":quorum_queue_utils",
    ],
    groups = [
        "classic_queue",
        "quorum_queue",
    ],
    suite_name = "single_active_consumer_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "sync_detection_SUITE",
    deps = DEPS,
)

ct_suite(
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "term_to_binary_compat_prop_SUITE",
    deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
        "@proper//:bazel_erlang_lib",
        "@rabbitmq_ct_helpers//:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "topic_permission_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    additional_srcs = [
        "test/rabbit_auth_backend_context_propagation_mock.erl",
        "test/rabbit_foo_protocol_connection_info.erl",
    ],
    suite_name = "unit_access_control_authn_authz_context_propagation_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "unit_access_control_credential_validation_SUITE",
    deps = DEPS + [
        "@proper//:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "medium",
    additional_srcs = [
        "test/rabbit_dummy_protocol_connection_info.erl",
    ],
    suite_name = "unit_access_control_SUITE",
    deps = DEPS,
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_amqp091_content_framing_SUITE",
    deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_amqp091_server_properties_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_app_management_SUITE",
    deps = DEPS,
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_cluster_formation_locking_mocks_SUITE",
    runtime_deps = [
        "@meck//:bazel_erlang_lib",
    ],
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_collections_SUITE",
    runtime_deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

ct_suite(
    size = "medium",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_config_value_encryption_SUITE",
    runtime_deps = [
        "//deps/rabbit/apps/rabbitmq_prelaunch:test_bazel_erlang_lib",
        "//deps/rabbit_common:test_bazel_erlang_lib",
        "@credentials_obfuscation//:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_connection_tracking_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_credit_flow_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_disk_monitor_mocks_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_disk_monitor_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_file_handle_cache_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_gen_server2_SUITE",
    deps = DEPS,
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_gm_SUITE",
    runtime_deps = [
        "@meck//:bazel_erlang_lib",
        "@rabbitmq_ct_helpers//:bazel_erlang_lib",
    ],
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_log_config_SUITE",
    runtime_deps = [
        "@syslog//:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_log_management_SUITE",
    deps = DEPS,
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_operator_policy_SUITE",
    deps = [
        "//deps/rabbit_common:test_bazel_erlang_lib",
    ],
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_pg_local_SUITE",
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_plugin_directories_SUITE",
    deps = [
        "//deps/rabbit_common:test_bazel_erlang_lib",
    ],
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_plugin_versioning_SUITE",
    runtime_deps = [
        "@rabbitmq_ct_helpers//:bazel_erlang_lib",
    ],
    deps = [
        "//deps/amqp_client:bazel_erlang_lib",
        "//deps/rabbit_common:test_bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_policy_validators_SUITE",
    deps = DEPS,
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_priority_queue_SUITE",
)

ct_suite(
    size = "small",
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_queue_consumers_SUITE",
)

rabbitmq_integration_suite(
    size = "small",
    additional_srcs = [
        "test/dummy_event_receiver.erl",
    ],
    suite_name = "unit_stats_and_metrics_SUITE",
    deps = DEPS,
)

ct_suite(
    size = "small",
    additional_srcs = [
        "test/dummy_supervisor2.erl",
    ],
    erlc_opts = RABBITMQ_TEST_ERLC_OPTS,
    suite_name = "unit_supervisor2_SUITE",
    deps = [
        "//deps/rabbit_common:bazel_erlang_lib",
    ],
)

rabbitmq_integration_suite(
    size = "small",
    suite_name = "unit_vm_memory_monitor_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    suite_name = "upgrade_preparation_SUITE",
    deps = DEPS,
)

rabbitmq_integration_suite(
    size = "medium",
    groups = [
        "cluster_size_1_network",
        "cluster_size_2_network",
        "cluster_size_1_direct",
        "cluster_size_2_direct",
    ],
    suite_name = "vhost_SUITE",
    deps = DEPS,
)
